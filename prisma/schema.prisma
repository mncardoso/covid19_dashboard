generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model columns_priv {
  Host        String   @default("") @db.Char(255)
  Db          String   @default("") @db.Char(64)
  User        String   @default("") @db.Char(32)
  Table_name  String   @default("") @db.Char(64)
  Column_name String   @default("") @db.Char(64)
  Timestamp   DateTime @default(now()) @db.Timestamp(0)
  Column_priv String   @default("")

  @@id([Host, Db, User, Table_name, Column_name])
}

model component {
  component_id       Int    @id @default(autoincrement()) @db.UnsignedInt
  component_group_id Int    @db.UnsignedInt
  component_urn      String @db.Text
}

model db {
  Host                  String                   @default("") @db.Char(255)
  Db                    String                   @default("") @db.Char(64)
  User                  String                   @default("") @db.Char(32)
  Select_priv           db_Select_priv           @default(N)
  Insert_priv           db_Insert_priv           @default(N)
  Update_priv           db_Update_priv           @default(N)
  Delete_priv           db_Delete_priv           @default(N)
  Create_priv           db_Create_priv           @default(N)
  Drop_priv             db_Drop_priv             @default(N)
  Grant_priv            db_Grant_priv            @default(N)
  References_priv       db_References_priv       @default(N)
  Index_priv            db_Index_priv            @default(N)
  Alter_priv            db_Alter_priv            @default(N)
  Create_tmp_table_priv db_Create_tmp_table_priv @default(N)
  Lock_tables_priv      db_Lock_tables_priv      @default(N)
  Create_view_priv      db_Create_view_priv      @default(N)
  Show_view_priv        db_Show_view_priv        @default(N)
  Create_routine_priv   db_Create_routine_priv   @default(N)
  Alter_routine_priv    db_Alter_routine_priv    @default(N)
  Execute_priv          db_Execute_priv          @default(N)
  Event_priv            db_Event_priv            @default(N)
  Trigger_priv          db_Trigger_priv          @default(N)

  @@id([Host, Db, User])
  @@index([User], map: "User")
}

model default_roles {
  HOST              String @default("") @db.Char(255)
  USER              String @default("") @db.Char(32)
  DEFAULT_ROLE_HOST String @default("%") @db.Char(255)
  DEFAULT_ROLE_USER String @default("") @db.Char(32)

  @@id([HOST, USER, DEFAULT_ROLE_HOST, DEFAULT_ROLE_USER])
}

model engine_cost {
  engine_name   String   @db.VarChar(64)
  device_type   Int
  cost_name     String   @db.VarChar(64)
  cost_value    Float?   @db.Float
  last_update   DateTime @default(now()) @db.Timestamp(0)
  comment       String?  @db.VarChar(1024)
  default_value Float?   @db.Float

  @@id([cost_name, engine_name, device_type])
}

model func {
  name String    @id @default("") @db.Char(64)
  ret  Int       @default(0) @db.TinyInt
  dl   String    @default("") @db.Char(128)
  type func_type
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model general_log {
  event_time   DateTime @default(now()) @db.Timestamp(6)
  user_host    String   @db.MediumText
  thread_id    BigInt   @db.UnsignedBigInt
  server_id    Int      @db.UnsignedInt
  command_type String   @db.VarChar(64)
  argument     Bytes    @db.MediumBlob

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model general_log_template {
  event_time   DateTime @default(now()) @db.Timestamp(6)
  user_host    String   @db.MediumText
  thread_id    BigInt   @db.UnsignedBigInt
  server_id    Int      @db.UnsignedInt
  command_type String   @db.VarChar(64)
  argument     Bytes    @db.MediumBlob

  @@ignore
}

model global_grants {
  USER              String                          @default("") @db.Char(32)
  HOST              String                          @default("") @db.Char(255)
  PRIV              String                          @default("") @db.Char(32)
  WITH_GRANT_OPTION global_grants_WITH_GRANT_OPTION @default(N)

  @@id([USER, HOST, PRIV])
}

model gtid_executed {
  source_uuid    String @db.Char(36)
  interval_start BigInt
  interval_end   BigInt

  @@id([source_uuid, interval_start])
}

model help_category {
  help_category_id   Int    @id @db.UnsignedSmallInt
  name               String @unique(map: "name") @db.Char(64)
  parent_category_id Int?   @db.UnsignedSmallInt
  url                String @db.Text
}

model help_keyword {
  help_keyword_id Int    @id @db.UnsignedInt
  name            String @unique(map: "name") @db.Char(64)
}

model help_relation {
  help_topic_id   Int @db.UnsignedInt
  help_keyword_id Int @db.UnsignedInt

  @@id([help_keyword_id, help_topic_id])
}

model help_topic {
  help_topic_id    Int    @id @db.UnsignedInt
  name             String @unique(map: "name") @db.Char(64)
  help_category_id Int    @db.UnsignedSmallInt
  description      String @db.Text
  example          String @db.Text
  url              String @db.Text
}

model innodb_index_stats {
  database_name    String   @db.VarChar(64)
  table_name       String   @db.VarChar(199)
  index_name       String   @db.VarChar(64)
  last_update      DateTime @default(now()) @db.Timestamp(0)
  stat_name        String   @db.VarChar(64)
  stat_value       BigInt   @db.UnsignedBigInt
  sample_size      BigInt?  @db.UnsignedBigInt
  stat_description String   @db.VarChar(1024)

  @@id([database_name, table_name, index_name, stat_name])
}

model innodb_table_stats {
  database_name            String   @db.VarChar(64)
  table_name               String   @db.VarChar(199)
  last_update              DateTime @default(now()) @db.Timestamp(0)
  n_rows                   BigInt   @db.UnsignedBigInt
  clustered_index_size     BigInt   @db.UnsignedBigInt
  sum_of_other_index_sizes BigInt   @db.UnsignedBigInt

  @@id([database_name, table_name])
}

model password_history {
  Host               String   @default("") @db.Char(255)
  User               String   @default("") @db.Char(32)
  Password_timestamp DateTime @default(now()) @db.Timestamp(6)
  Password           String?  @db.Text

  @@id([Host, User, Password_timestamp(sort: Desc)])
}

model plugin {
  name String @id @default("") @db.VarChar(64)
  dl   String @default("") @db.VarChar(128)
}

model procs_priv {
  Host         String                  @default("") @db.Char(255)
  Db           String                  @default("") @db.Char(64)
  User         String                  @default("") @db.Char(32)
  Routine_name String                  @default("") @db.Char(64)
  Routine_type procs_priv_Routine_type
  Grantor      String                  @default("") @db.VarChar(288)
  Proc_priv    String                  @default("")
  Timestamp    DateTime                @default(now()) @db.Timestamp(0)

  @@id([Host, Db, User, Routine_name, Routine_type])
  @@index([Grantor], map: "Grantor")
}

model proxies_priv {
  Host         String   @default("") @db.Char(255)
  User         String   @default("") @db.Char(32)
  Proxied_host String   @default("") @db.Char(255)
  Proxied_user String   @default("") @db.Char(32)
  With_grant   Boolean  @default(false)
  Grantor      String   @default("") @db.VarChar(288)
  Timestamp    DateTime @default(now()) @db.Timestamp(0)

  @@id([Host, User, Proxied_host, Proxied_user])
  @@index([Grantor], map: "Grantor")
}

model rds_configuration {
  name        String  @id @db.VarChar(100)
  value       String? @db.VarChar(100)
  description String  @db.VarChar(300)
}

model rds_global_status_history {
  collection_end   DateTime  @default(now()) @db.Timestamp(0)
  collection_start DateTime? @db.Timestamp(0)
  variable_name    String    @db.VarChar(64)
  variable_value   String    @db.VarChar(1024)
  variable_delta   Int

  @@id([collection_end, variable_name])
}

model rds_global_status_history_old {
  collection_end   DateTime  @default(now()) @db.Timestamp(0)
  collection_start DateTime? @db.Timestamp(0)
  variable_name    String    @db.VarChar(64)
  variable_value   String    @db.VarChar(1024)
  variable_delta   Int

  @@id([collection_end, variable_name])
}

model rds_heartbeat2 {
  id    Int     @id
  value BigInt?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model rds_history {
  action_timestamp DateTime @default(now()) @db.Timestamp(0)
  called_by_user   String   @db.VarChar(50)
  action           String?  @db.VarChar(40)
  mysql_version    String   @db.VarChar(50)
  master_host      String?  @db.VarChar(255)
  master_port      Int?
  master_user      String?  @db.VarChar(16)
  master_log_file  String?  @db.VarChar(50)
  master_log_pos   String?  @db.MediumText
  master_ssl       Boolean?
  master_delay     Int?
  auto_position    Boolean?
  master_gtid      String?  @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model rds_replication_status {
  action_timestamp       DateTime @default(now()) @db.Timestamp(0)
  called_by_user         String   @db.VarChar(50)
  action                 String   @db.VarChar(20)
  mysql_version          String   @db.VarChar(50)
  master_host            String?  @db.VarChar(255)
  master_port            Int?
  replication_log_file   String?  @db.Text
  replication_stop_point BigInt?
  replication_gtid       String?  @db.Text

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model rds_sysinfo {
  name  String? @db.VarChar(25)
  value String? @db.VarChar(50)

  @@ignore
}

model replication_asynchronous_connection_failover {
  Channel_name      String @db.Char(64)
  Host              String @db.Char(255)
  Port              Int    @db.UnsignedInt
  Network_namespace String @db.Char(64)
  Weight            Int    @db.UnsignedTinyInt
  Managed_name      String @default("") @db.Char(64)

  @@id([Channel_name, Host, Port, Network_namespace, Managed_name])
  @@index([Channel_name, Managed_name], map: "Channel_name")
}

model replication_asynchronous_connection_failover_managed {
  Channel_name  String @db.Char(64)
  Managed_name  String @default("") @db.Char(64)
  Managed_type  String @default("") @db.Char(64)
  Configuration Json?

  @@id([Channel_name, Managed_name])
}

model replication_group_configuration_version {
  name    String @id @db.Char(255)
  version BigInt @db.UnsignedBigInt
}

model replication_group_member_actions {
  name           String  @db.Char(255)
  event          String  @db.Char(64)
  enabled        Boolean
  type           String  @db.Char(64)
  priority       Int     @db.UnsignedTinyInt
  error_handling String  @db.Char(64)

  @@id([name, event])
  @@index([event], map: "event")
}

model role_edges {
  FROM_HOST         String                       @default("") @db.Char(255)
  FROM_USER         String                       @default("") @db.Char(32)
  TO_HOST           String                       @default("") @db.Char(255)
  TO_USER           String                       @default("") @db.Char(32)
  WITH_ADMIN_OPTION role_edges_WITH_ADMIN_OPTION @default(N)

  @@id([FROM_HOST, FROM_USER, TO_HOST, TO_USER])
}

model server_cost {
  cost_name     String   @id @db.VarChar(64)
  cost_value    Float?   @db.Float
  last_update   DateTime @default(now()) @db.Timestamp(0)
  comment       String?  @db.VarChar(1024)
  default_value Float?   @db.Float
}

model servers {
  Server_name String @id @default("") @db.Char(64)
  Host        String @default("") @db.Char(255)
  Db          String @default("") @db.Char(64)
  Username    String @default("") @db.Char(64)
  Password    String @default("") @db.Char(64)
  Port        Int    @default(0)
  Socket      String @default("") @db.Char(64)
  Wrapper     String @default("") @db.Char(64)
  Owner       String @default("") @db.Char(64)
}

model slave_master_info {
  Number_of_lines                 Int     @db.UnsignedInt
  Master_log_name                 String  @db.Text
  Master_log_pos                  BigInt  @db.UnsignedBigInt
  Host                            String? @db.Char(255)
  User_name                       String? @db.Text
  User_password                   String? @db.Text
  Port                            Int     @db.UnsignedInt
  Connect_retry                   Int     @db.UnsignedInt
  Enabled_ssl                     Boolean
  Ssl_ca                          String? @db.Text
  Ssl_capath                      String? @db.Text
  Ssl_cert                        String? @db.Text
  Ssl_cipher                      String? @db.Text
  Ssl_key                         String? @db.Text
  Ssl_verify_server_cert          Boolean
  Heartbeat                       Float   @db.Float
  Bind                            String? @db.Text
  Ignored_server_ids              String? @db.Text
  Uuid                            String? @db.Text
  Retry_count                     BigInt  @db.UnsignedBigInt
  Ssl_crl                         String? @db.Text
  Ssl_crlpath                     String? @db.Text
  Enabled_auto_position           Boolean
  Channel_name                    String  @id @db.VarChar(64)
  Tls_version                     String? @db.Text
  Public_key_path                 String? @db.Text
  Get_public_key                  Boolean
  Network_namespace               String? @db.Text
  Master_compression_algorithm    String  @db.VarChar(64)
  Master_zstd_compression_level   Int     @db.UnsignedInt
  Tls_ciphersuites                String? @db.Text
  Source_connection_auto_failover Boolean @default(false)
  Gtid_only                       Boolean @default(false)
}

model slave_relay_log_info {
  Number_of_lines                              Int                                                              @db.UnsignedInt
  Relay_log_name                               String?                                                          @db.Text
  Relay_log_pos                                BigInt?                                                          @db.UnsignedBigInt
  Master_log_name                              String?                                                          @db.Text
  Master_log_pos                               BigInt?                                                          @db.UnsignedBigInt
  Sql_delay                                    Int?
  Number_of_workers                            Int?                                                             @db.UnsignedInt
  Id                                           Int?                                                             @db.UnsignedInt
  Channel_name                                 String                                                           @id @db.VarChar(64)
  Privilege_checks_username                    String?                                                          @db.VarChar(32)
  Privilege_checks_hostname                    String?                                                          @db.VarChar(255)
  Require_row_format                           Boolean
  Require_table_primary_key_check              slave_relay_log_info_Require_table_primary_key_check             @default(STREAM)
  Assign_gtids_to_anonymous_transactions_type  slave_relay_log_info_Assign_gtids_to_anonymous_transactions_type @default(OFF)
  Assign_gtids_to_anonymous_transactions_value String?                                                          @db.Text
}

model slave_worker_info {
  Id                         Int    @db.UnsignedInt
  Relay_log_name             String @db.Text
  Relay_log_pos              BigInt @db.UnsignedBigInt
  Master_log_name            String @db.Text
  Master_log_pos             BigInt @db.UnsignedBigInt
  Checkpoint_relay_log_name  String @db.Text
  Checkpoint_relay_log_pos   BigInt @db.UnsignedBigInt
  Checkpoint_master_log_name String @db.Text
  Checkpoint_master_log_pos  BigInt @db.UnsignedBigInt
  Checkpoint_seqno           Int    @db.UnsignedInt
  Checkpoint_group_size      Int    @db.UnsignedInt
  Checkpoint_group_bitmap    Bytes  @db.Blob
  Channel_name               String @db.VarChar(64)

  @@id([Channel_name, Id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model slow_log {
  start_time     DateTime @default(now()) @db.Timestamp(6)
  user_host      String   @db.MediumText
  query_time     DateTime @db.Time(6)
  lock_time      DateTime @db.Time(6)
  rows_sent      Int
  rows_examined  Int
  db             String   @db.VarChar(512)
  last_insert_id Int
  insert_id      Int
  server_id      Int      @db.UnsignedInt
  sql_text       Bytes    @db.MediumBlob
  thread_id      BigInt   @db.UnsignedBigInt

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model slow_log_template {
  start_time     DateTime @default(now()) @db.Timestamp(6)
  user_host      String   @db.MediumText
  query_time     DateTime @db.Time(6)
  lock_time      DateTime @db.Time(6)
  rows_sent      Int
  rows_examined  Int
  db             String   @db.VarChar(512)
  last_insert_id Int
  insert_id      Int
  server_id      Int      @db.UnsignedInt
  sql_text       Bytes    @db.MediumBlob
  thread_id      BigInt   @db.UnsignedBigInt

  @@ignore
}

model tables_priv {
  Host        String   @default("") @db.Char(255)
  Db          String   @default("") @db.Char(64)
  User        String   @default("") @db.Char(32)
  Table_name  String   @default("") @db.Char(64)
  Grantor     String   @default("") @db.VarChar(288)
  Timestamp   DateTime @default(now()) @db.Timestamp(0)
  Table_priv  String   @default("")
  Column_priv String   @default("")

  @@id([Host, Db, User, Table_name])
  @@index([Grantor], map: "Grantor")
}

model time_zone {
  Time_zone_id     Int                        @id @default(autoincrement()) @db.UnsignedInt
  Use_leap_seconds time_zone_Use_leap_seconds @default(N)
}

model time_zone_leap_second {
  Transition_time BigInt @id
  Correction      Int
}

model time_zone_name {
  Name         String @id @db.Char(64)
  Time_zone_id Int    @db.UnsignedInt
}

model time_zone_transition {
  Time_zone_id       Int    @db.UnsignedInt
  Transition_time    BigInt
  Transition_type_id Int    @db.UnsignedInt

  @@id([Time_zone_id, Transition_time])
}

model time_zone_transition_type {
  Time_zone_id       Int    @db.UnsignedInt
  Transition_type_id Int    @db.UnsignedInt
  Offset             Int    @default(0)
  Is_DST             Int    @default(0) @db.UnsignedTinyInt
  Abbreviation       String @default("") @db.Char(8)

  @@id([Time_zone_id, Transition_type_id])
}

model user {
  Host                     String                         @default("") @db.Char(255)
  User                     String                         @default("") @db.Char(32)
  Select_priv              user_Select_priv               @default(N)
  Insert_priv              user_Insert_priv               @default(N)
  Update_priv              user_Update_priv               @default(N)
  Delete_priv              user_Delete_priv               @default(N)
  Create_priv              user_Create_priv               @default(N)
  Drop_priv                user_Drop_priv                 @default(N)
  Reload_priv              user_Reload_priv               @default(N)
  Shutdown_priv            user_Shutdown_priv             @default(N)
  Process_priv             user_Process_priv              @default(N)
  File_priv                user_File_priv                 @default(N)
  Grant_priv               user_Grant_priv                @default(N)
  References_priv          user_References_priv           @default(N)
  Index_priv               user_Index_priv                @default(N)
  Alter_priv               user_Alter_priv                @default(N)
  Show_db_priv             user_Show_db_priv              @default(N)
  Super_priv               user_Super_priv                @default(N)
  Create_tmp_table_priv    user_Create_tmp_table_priv     @default(N)
  Lock_tables_priv         user_Lock_tables_priv          @default(N)
  Execute_priv             user_Execute_priv              @default(N)
  Repl_slave_priv          user_Repl_slave_priv           @default(N)
  Repl_client_priv         user_Repl_client_priv          @default(N)
  Create_view_priv         user_Create_view_priv          @default(N)
  Show_view_priv           user_Show_view_priv            @default(N)
  Create_routine_priv      user_Create_routine_priv       @default(N)
  Alter_routine_priv       user_Alter_routine_priv        @default(N)
  Create_user_priv         user_Create_user_priv          @default(N)
  Event_priv               user_Event_priv                @default(N)
  Trigger_priv             user_Trigger_priv              @default(N)
  Create_tablespace_priv   user_Create_tablespace_priv    @default(N)
  ssl_type                 user_ssl_type                  @default(EMPTY_ENUM_VALUE)
  ssl_cipher               Bytes                          @db.Blob
  x509_issuer              Bytes                          @db.Blob
  x509_subject             Bytes                          @db.Blob
  max_questions            Int                            @default(0) @db.UnsignedInt
  max_updates              Int                            @default(0) @db.UnsignedInt
  max_connections          Int                            @default(0) @db.UnsignedInt
  max_user_connections     Int                            @default(0) @db.UnsignedInt
  plugin                   String                         @default("caching_sha2_password") @db.Char(64)
  authentication_string    String?                        @db.Text
  password_expired         user_password_expired          @default(N)
  password_last_changed    DateTime?                      @db.Timestamp(0)
  password_lifetime        Int?                           @db.UnsignedSmallInt
  account_locked           user_account_locked            @default(N)
  Create_role_priv         user_Create_role_priv          @default(N)
  Drop_role_priv           user_Drop_role_priv            @default(N)
  Password_reuse_history   Int?                           @db.UnsignedSmallInt
  Password_reuse_time      Int?                           @db.UnsignedSmallInt
  Password_require_current user_Password_require_current?
  User_attributes          Json?

  @@id([Host, User])
}

enum time_zone_Use_leap_seconds {
  Y
  N
}

enum user_Select_priv {
  N
  Y
}

enum db_Select_priv {
  N
  Y
}

enum func_type {
  function
  aggregate
}

enum global_grants_WITH_GRANT_OPTION {
  N
  Y
}

enum user_Insert_priv {
  N
  Y
}

enum db_Insert_priv {
  N
  Y
}

enum procs_priv_Routine_type {
  FUNCTION
  PROCEDURE
}

enum role_edges_WITH_ADMIN_OPTION {
  N
  Y
}

enum user_Update_priv {
  N
  Y
}

enum db_Update_priv {
  N
  Y
}

enum user_Delete_priv {
  N
  Y
}

enum db_Delete_priv {
  N
  Y
}

enum user_Create_priv {
  N
  Y
}

enum db_Create_priv {
  N
  Y
}

enum user_Drop_priv {
  N
  Y
}

enum db_Drop_priv {
  N
  Y
}

enum user_Reload_priv {
  N
  Y
}

enum db_Grant_priv {
  N
  Y
}

enum user_Shutdown_priv {
  N
  Y
}

enum db_References_priv {
  N
  Y
}

enum user_Process_priv {
  N
  Y
}

enum db_Index_priv {
  N
  Y
}

enum user_File_priv {
  N
  Y
}

enum db_Alter_priv {
  N
  Y
}

enum slave_relay_log_info_Require_table_primary_key_check {
  STREAM
  ON
  OFF
}

enum user_Grant_priv {
  N
  Y
}

enum db_Create_tmp_table_priv {
  N
  Y
}

enum slave_relay_log_info_Assign_gtids_to_anonymous_transactions_type {
  OFF
  LOCAL
  UUID
}

enum user_References_priv {
  N
  Y
}

enum db_Lock_tables_priv {
  N
  Y
}

enum user_Index_priv {
  N
  Y
}

enum db_Create_view_priv {
  N
  Y
}

enum user_Alter_priv {
  N
  Y
}

enum db_Show_view_priv {
  N
  Y
}

enum user_Show_db_priv {
  N
  Y
}

enum db_Create_routine_priv {
  N
  Y
}

enum user_Super_priv {
  N
  Y
}

enum db_Alter_routine_priv {
  N
  Y
}

enum user_Create_tmp_table_priv {
  N
  Y
}

enum db_Execute_priv {
  N
  Y
}

enum user_Lock_tables_priv {
  N
  Y
}

enum db_Event_priv {
  N
  Y
}

enum user_Execute_priv {
  N
  Y
}

enum db_Trigger_priv {
  N
  Y
}

enum user_Repl_slave_priv {
  N
  Y
}

enum user_Repl_client_priv {
  N
  Y
}

enum user_Create_view_priv {
  N
  Y
}

enum user_Show_view_priv {
  N
  Y
}

enum user_Create_routine_priv {
  N
  Y
}

enum user_Alter_routine_priv {
  N
  Y
}

enum user_Create_user_priv {
  N
  Y
}

enum user_Event_priv {
  N
  Y
}

enum user_Trigger_priv {
  N
  Y
}

enum user_Create_tablespace_priv {
  N
  Y
}

enum user_ssl_type {
  EMPTY_ENUM_VALUE @map("")
  ANY
  X509
  SPECIFIED
}

enum user_password_expired {
  N
  Y
}

enum user_account_locked {
  N
  Y
}

enum user_Create_role_priv {
  N
  Y
}

enum user_Drop_role_priv {
  N
  Y
}

enum user_Password_require_current {
  N
  Y
}
